#pragma once

#include "Core/Log.h"
#include "RootDirectory.h" // Config file generated by CMake.

#include <string>
#include <cstdlib>
#include <vector>
#include <filesystem>
#include <optional>

namespace zn
{
    class FileSystem
    {
    public:
        using Path = std::filesystem::path;
        using DirectoryEntry = std::filesystem::directory_entry;
        using DirectoryIterator = std::filesystem::directory_iterator;

        class PathNormalizer
        {
        public:
            static std::string Normalize(std::string_view path);
        };
        
        static bool Exists(const std::string& path);
        static bool IsFile(const std::string& path);
        static bool IsDirectory(const std::string& path);
        
        static std::vector<std::string> ListDirectory(const std::string& path);
        
        static std::optional<std::vector<std::byte>> ReadFileAsBinary(const std::string& path);
        static std::optional<std::string> ReadFileAsString(const std::string& path);

        static std::optional<Path> GetFullPath(const std::string& path);
    
    private:
        static const std::string& GetRoot() 
        {
            static const char* envRoot = std::getenv("ZENON_ROOT_PATH");
            static const char* givenRoot = (envRoot != nullptr ? envRoot : zenon_root);

            static std::string root = (givenRoot != nullptr ? givenRoot : "");

            return root;
        }
    };
}

