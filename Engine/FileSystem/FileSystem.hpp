#pragma once

#include "Core/Base.hpp"
#include "RootDirectory.h" // Config file generated by CMake.

#include <filesystem>

namespace zn
{
    class FileSystem
    {
    public:
        using Path = std::filesystem::path;
        using DirectoryEntry = std::filesystem::directory_entry;
        using DirectoryIterator = std::filesystem::directory_iterator;

        class PathNormalizer
        {
        public:
            static String Normalize(StringView path);
        };
        
        static b8 Exists(const String& path);
        static b8 IsFile(const String& path);
        static b8 IsDirectory(const String& path);
        
        static Vector<String> ListDirectory(const String& path);
        
        static Opt<Vector<Byte>> ReadFileAsBinary(const String& path);
        static Opt<String> ReadFileAsString(const String& path);

        static Opt<Path> GetFullPath(const String& path);
    
    private:
        static const String& GetRoot() 
        {
            static const char* envRoot = std::getenv("ZENON_ROOT_PATH");
            static const char* givenRoot = (envRoot != nullptr ? envRoot : zenon_root);

            static String root = (givenRoot != nullptr ? givenRoot : "");

            return root;
        }
    };
}

