#pragma once

#include "RootDirectory.h" // Config file generated by CMake.

#include <string>
#include <cstdlib>

class FileSystem 
{
private:
    using Builder = std::string(*)(const std::string& path); // Modern type alias

public:
    static std::string GetPath(const std::string& path) 
    {
        static Builder pathBuilder = GetPathBuilder();

        return pathBuilder(path);
    }

private:
    static const std::string& GetRoot() 
    {
        static const char* envRoot = std::getenv("ZENON_ROOT_PATH");
        static const char* givenRoot = (envRoot != nullptr ? envRoot : zenon_root);

        static std::string root = (givenRoot != nullptr ? givenRoot : "");

        return root;
    }

    static Builder GetPathBuilder() 
    {
        if (!GetRoot().empty())
            return &FileSystem::GetPathRelativeRoot;
        else
            return &FileSystem::GetPathRelativeBinary;
    }

    static std::string GetPathRelativeRoot(const std::string& path) 
    {
        return GetRoot() + "/" + path;
    }

    static std::string GetPathRelativeBinary(const std::string& path) 
    {
        return "../../../" + path;
    }
};